[user]
	name = Alan Skorkin
	email = alan@skorks.com
[github]
	user = skorks
	token = 85779957b3c7afce932f60e214236836
[core]
	editor = vim
  pager = less -FRSX
[merge]
	tool = meld
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[alias]
  co = checkout
  ci = commit
  st = status
  br = branch
  changes = log --oneline --reverse
  pop = !git stash apply && git stash clear
  tags = tag -n1 -l
  com = checkout master 
  # usage example: git w -n5
  w = whatchanged
  # add all changed (but not new) files to stage (index):
  au = add -u
  # show list of contributors in descending order by number of commits
  rank = shortlog -sn --no-merges
  # prune all tracking local branches that have been removed from remote:
  prune-all = !git remote | xargs -n 1 git remote prune
  # given a string for an author, try to figure out full name and email:
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
  # given any git object, try to show it briefly
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  # Search for a given string in all patches and print commit messages
  # example: search for any commit that adds or removes string "foobar"
  #     git searchcommits foobar
  # example: search commits for string "foobar" in directory src/lib
  #     git searchcommits foobar src/lib
  # example: search commits for "foobar", print full diff of commit with 1 line context
  #     git searchcommits foobar --pickaxe-all -U1 src/lib
  searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

  last = cat-file commit HEAD
  cat = -p cat-file -p
  ds = diff --stat
  #git branch -vv   #branches and which remotes
  #git branch -av   #local and remote braches

  log1 = log --pretty=oneline --abbrev-commit --decorate
  log2 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  log3 = log --graph --pretty=format:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative $@ | git name-rev --stdin --name-only

  amend = commit --amend -C HEAD
  edit-last-commit = !vim `git diff-tree -r --name-only HEAD HEAD~1`

  #st = "!f() { git ls-files --exclude-standard -t -u -s -m -d $@ | sed -e 's/C.*\t/C /' ; } ; f"
  #s = "!git diff --name-status | sed -e 's/^/W /' ; git diff --cached --name-status | sed -e 's/^/C /'"
  #file-blame = !git ls-files | xargs -n1 -i{} git log -1 --pretty=format:\"%ci {}\" -- {}
  #edit-last-commit = !vim `git diff-tree -r --name-only HEAD HEAD~1`
  #edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  #add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
[push]
  default = tracking
  #default = matching